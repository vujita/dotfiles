" Specify a directory for plugins
call plug#begin('~/.vim/plugged')
" PYTHON PROVIDERS {{{
if has('macunix')
    " OSX
    let g:python3_host_prog = '/usr/bin/python3' " -- Set python 3 provider

elseif has('unix')
    " Ubuntu
    let g:python3_host_prog = '/usr/bin/python3' " -------- Set python 3 provider
    let g:python_host_prog = '/usr/bin/python' " ---------- Set python 2 provider

elseif has('win32') || has('win64')
    " Window

endif
" }}}
"
if exists('g:vscode')
    " VSCode extension
else
    Plug 'crusoexia/vim-monokai'
    " ordinary neovim
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'scrooloose/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'

    Plug 'vim-syntastic/syntastic'
    Plug 'airblade/vim-gitgutter'
    Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

    Plug 'christoomey/vim-tmux-navigator'

    Plug 'HerringtonDarkholme/yats.vim' " TS Syntax

    Plug 'sheerun/vim-polyglot'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-surround'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'nathanaelkane/vim-indent-guides'
    Plug 'flazz/vim-colorschemes'
    "Plug 'joshdick/onedark.vim'
    Plug 'itchyny/lightline.vim'
    Plug 'tomtom/tcomment_vim'

endif
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Initialize plugin system
call plug#end()
if exists('g:vscode')
    " VSCode extension
else
    " ordinary neovim
    let g:indent_guides_enable_on_vim_startup = 1
    " Nerdtree 
    let g:NERDTreeGitStatusIndicatorMapCustom = {
        \ "Modified"  : "✹",
        \ "Staged"    : "✚",
        \ "Untracked" : "✭",
        \ "Renamed"   : "➜",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖",
        \ "Dirty"     : "✗",
        \ "Clean"     : "✔︎",
        \ 'Ignored'   : '☒',
        \ "Unknown"   : "?"
        \ }
    let g:NERDTreeGitStatusShowIgnoredStatus = 1
    " airline
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#tabline#formatter = 'default'

    " inoremap jk <ESC>
    " nmap <C-n> :NERDTreeToggle<CR>
    " vmap ++ <plug>NERDCommenterToggle
    " nmap ++ <plug>NERDCommenterToggle

    " open NERDTree automatically
    "autocmd StdinReadPre * let s:std_in=1
    "autocmd VimEnter * NERDTree


    let NERDTreeShowHidden=1
    let g:NERDTreeGitStatusWithFlags = 1
    "let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    "let g:NERDTreeGitStatusNodeColorization = 1
    "let g:NERDTreeColorMapCustom = {
        "\ "Staged"    : "#0ee375",  
        "\ "Modified"  : "#d9bf91",  
        "\ "Renamed"   : "#51C9FC",  
        "\ "Untracked" : "#FCE77C",  
        "\ "Unmerged"  : "#FC51E6",  
        "\ "Dirty"     : "#FFBD61",  
        "\ "Clean"     : "#87939A",   
        "\ "Ignored"   : "#808080"   
        "\ }                         


    let g:NERDTreeIgnore = []

    " vim-prettier
    "let g:prettier#quickfix_enabled = 0
    "let g:prettier#quickfix_auto_focus = 0
    " prettier command for coc
    command! -nargs=0 Prettier :CocCommand prettier.formatFile
    " run prettier on save
    "let g:prettier#autoformat = 0
    "autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync


    " ctrlp
    "let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']


    " j/k will move virtual lines (lines that wrap)
    noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
    noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')


    set smarttab
    set cindent
    set tabstop=2
    set shiftwidth=2
    " always uses spaces instead of tab characters
    set expandtab

    "colorscheme gruvbox
    colorscheme monokai 

    " sync open file with NERDTree
    " " Check if NERDTree is open or active
    function! IsNERDTreeOpen()        
      return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
    endfunction

    " Call NERDTreeFind iff NERDTree is active, current window contains a modifiable
    " file, and we're not in vimdiff
    function! SyncTree()
      if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
        NERDTreeFind
        wincmd p
      endif
    endfunction

    " Highlight currently open buffer in NERDTree
    autocmd BufEnter * call SyncTree()

    " coc config
    let g:coc_global_extensions = [
      \ 'coc-snippets',
      \ 'coc-pairs',
      \ 'coc-tsserver',
      \ 'coc-eslint', 
      \ 'coc-prettier', 
      \ 'coc-json', 
      \ ]
    " from readme
    " if hidden is not set, TextEdit might fail.
    set hidden " Some servers have issues with backup files, see #649 set nobackup set nowritebackup " Better display for messages set cmdheight=2 " You will have bad experience for diagnostic messages when it's default 4000.
    set updatetime=300

    " don't give |ins-completion-menu| messages.
    set shortmess+=c

    " always show signcolumns
    set signcolumn=yes

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    " inoremap <silent><expr> <TAB>
    ""      \ pumvisible() ? "\<C-n>" :
    ""      \ <SID>check_back_space() ? "\<TAB>" :
    ""      \ coc#refresh()

    "" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    "" function! s:check_back_space() abort
    ""  let col = col('.') - 1
    ""  return !col || getline('.')[col - 1]  =~# '\s'
    "" endfunction

    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    " inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    " Or use `complete_info` if your vim support it, like:
    " inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    function RandomColorScheme()
      let mycolors = split(globpath(&rtp,"**/colors/*.vim"),"\n") 
      exe 'so ' . mycolors[localtime() % len(mycolors)]
      unlet mycolors
    endfunction

    "call RandomColorScheme()
    "colorscheme dracula
    "let g:onedark_hide_endofbuffer=1
    "let g:onedark_terminal_italics=1

    "colorscheme onedark

    :command NewColor call RandomColorScheme()
    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Remap for rename current word
    nmap <F2> <Plug>(coc-rename)

    " Remap for format selected region
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap for do codeAction of current line
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Fix autofix problem of current line
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Create mappings for function text object, requires document symbols feature of languageserver.
    xmap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap if <Plug>(coc-funcobj-i)
    omap af <Plug>(coc-funcobj-a)

    " Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
    nmap <silent> <C-d> <Plug>(coc-range-select)
    xmap <silent> <C-d> <Plug>(coc-range-select)

    " Use `:Format` to format current buffer
    command! -nargs=0 Format :call CocAction('format')

    " Use `:Fold` to fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " use `:OR` for organize import of current buffer
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    " Add status line support, for integration with other plugin, checkout `:h coc-status`
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
        inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
    inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"
    " Using CocList
    " Show all diagnostics
    nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions
    nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
    " Show commands
    nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document
    nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols
    nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list
    nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
    " Toggle fold at current position 
    " (Using s-tab to avoid collision with <tab> and <C-i>)
    nnoremap <s-tab> za
    "Set ctrlp to GFiles with fzf
    nnoremap <silent> <C-p> :GFiles<CR>
    nnoremap <silent> <C-s> :w<CR>
    nnoremap <silent> <space>f :Ag<CR>
    nnoremap <silent> <space>p :NewColor<CR>
    nnoremap <silent> <tab>f :Lines<CR>

    " File modification mappings
    nnoremap <silent> <C-s> :w<CR>
    nnoremap <silent> <C-q> :q!<CR>

endif

set number
filetype plugin indent on
syntax on
set termguicolors

set foldmethod=syntax
set foldnestmax=30

set foldlevel=2
set foldlevelstart=1

set foldlevelstart=20

" syntastic
let g:syntastic_javascript_checkers=['eslint']
let g:syntastic_javascript_eslint_exe='$(npm bin)/eslint'

" Move the current line up or down
nnoremap <down> :m .+1<CR>==
nnoremap <up> :m .-2<CR>==
vnoremap <up> :m '<-2<CR>gv=gv
vnoremap <down> :m '>+1<CR>gv=gv
let g:tmux_navigator_no_mappings = 1

noremap <silent> <C-h> :<C-U>TmuxNavigateLeft<cr>
noremap <silent> <C-j> :<C-U>TmuxNavigateDown<cr>
noremap <silent> <C-k> :<C-U>TmuxNavigateUp<cr>
noremap <silent> <C-l> :<C-U>TmuxNavigateRight<cr>
" noremap <silent> <C-h> :<C-U>TmuxNavigatePrevious<cr>
